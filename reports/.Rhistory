thetaRange = c(5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
for (i in 1:10) {
test[i] = partA(SampleB,thetaRange[i])
}
plot(test,thetaRange)
plot(test,thetaRange, xlab = "log-likelihood", ylab = "value of Theta")
sampleB = c(12, 8, 14, 8, 11, 6, 13, 9, 9, 10)
thetaRange = c(5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
partA = function(mySample,theta){
return(sum(log(dpois(mySample,theta))))
}
for (i in 1:10) {
test[i] = partA(sampleB,thetaRange[i])
}
test = 1:10
for (i in 1:10) {
test[i] = partA(sampleB,thetaRange[i])
}
plot(test,thetaRange, xlab = "log-likelihood", ylab = "value of Theta")
partA = function(mySample,theta){
return(sum(log(dpois(mySample,theta))))
}
sampleB = c(12, 8, 14, 8, 11, 6, 13, 9, 9, 10)
thetaRange = c(5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
test = 1:10
for (i in 1:10) {
test[i] = partA(sampleB,thetaRange[i])
}
plot(test,thetaRange, xlab = "log-likelihood", ylab = "value of Theta")
plot(test,thetaRange, xlab = "log-likelihood", ylab = "value of Theta", main = "log-likelihood against Theta")
?optimize
?optimise
#Part2a
?logLik()
?optimise
plot(thetaRange,test, xlab = "value of Theta", ylab = "log-likelihood", main = "log-likelihood against Theta")
###change function so that it returns the Theta that Maximizes the loglik
return(sum(log(dpois(mySample,theta))))
?optimise
#Part2c
tempp= sum(sampleB)/10
tempp
> ## Load the nclSLR package:
> library(nclSLR)
## Load the nclSLR package:
library(nclSLR)
## Load the data:
data(airpollution)
## Check data size:
dim(airpollution)
## Load the nclSLR package:
library(nclSLR)
## Load the nclSLR package:
library(nclSLR)
## Load the nclSLR package:
library(nclSLR)
## Load the data:
data(airpollution)
## Check data size:
dim(airpollution)
## Load the nclSLR package:
library(nclSLR)
## Load the data:
data(airpollution)
## Check data size:
dim(airpollution)
## Load the nclSLR package:
library(nclSLR)
## Load the data:
data(airpollution)
## Check data size:
dim(airpollution)
install.packages("nclSLR", repos = "http://R-Forge.R-project.org")
## Load the nclSLR package:
library(nclSLR)
## Load the data:
data(airpollution)
## Check data size:
dim(airpollution)
head(airpollution, 3)
head(airpollution, 5)
?airpollution
airpollution$NONPOOR
summary(airpollution)
a = summary(airpollution)
a
summary(airpollution)
#poor people cities
poorCities = airpollution[airpollution$NONPOOR<50]
poorCities
#poor people cities
poorCities = airpollution[airpollution$NONPOOR<60]
poorCities
#poor people cities
poorCities = airpollution[airpollution$NONPOOR<80]
#poor people cities
poorCities = airpollution[airpollution$NONPOOR<80]
#poor people cities
poorCities = airpollution[airpollution$NONPOOR<80]
#poor people cities
poorCities = airpollution[airpollution$NONPOOR<50]
poorCities
#poor people cities
poorCities = airpollution[,airpollution$NONPOOR<50]
poorCities
View(airpollution)
#poor people cities
poorCities = airpollution[airpollution$NONPOOR<70]
poorCities
#poor people cities
poorCities = airpollution[airpollution$NONPOOR<90]
poorCities
#poor people cities
poorCities = airpollution[0]
poorCities
#poor people cities
poorCities = airpollution[3]
poorCities
#poor people cities
poorCities = airpollution[7]
poorCities
#poor people cities
poorCities = airpollution[9]
poorCities
#poor people cities
poorCities = airpollution$NONPOOR
poorCities
data("airpollution")
data(airpollution)
data(airpollution)
## Check data size:
dim(airpollution)
## Print the first few rows:
head(airpollution, 5)
#poor people cities
poorCities = airpollution$NONPOOR
poorCities
#poor people cities
poorCities = airpollution[]
poorCities
#poor people cities
poorCities = airpollution[9 > 80]
poorCities
#poor people cities
poorCities = airpollution[9,0]
poorCities
#poor people cities
poorCities = airpollution[9,3]
poorCities
#poor people cities
poorCities = airpollution[9,airpollution$NONPOOR<85]
poorCities
airpollution$
#poor people cities
poorCities = airpollution[9,airpollution$NONPOOR<85]
airpollution$NONPOOR
airpollution[airpollution<85]
airpollution[airpollution$NONPOOR<85]
airpollution[airpollution$NONPOOR<85]
#poor people cities
poorCities = subset(airpollution, airpollution$NONPOOR<85)
poorCities
#poor people cities
poorCities = subset(airpollution, airpollution$NONPOOR<75)
poorCities
#poor people cities
poorCities = subset(airpollution, airpollution$NONPOOR<70)
poorCities
richCities = subset(airpollution, airpollution$NONPOOR>=70)
richCities
#poor people cities
poorCities = subset(airpollution$NONPOOR, airpollution$NONPOOR<70)
poorCities
#poor people cities
poorCities = subset(airpollution, airpollution$NONPOOR<70)
poorCities
richCities = subset(airpollution, airpollution$NONPOOR>=70)
richCities
summary(poorCities)
summary(richCities)
?summary
summary(richCities)[4]
summary(richCities)[2,4]
summary(richCities)[,4]
summary(richCities)[,9]
summary(poorCities)[,9]
#poor people cities
poorCities = subset(airpollution$NONPOOR, airpollution$NONPOOR<70)
boxplot(poorCities)
richCities = subset(airpollution$NONPOOR, airpollution$NONPOOR>=70)
boxplot(poorCities,richCities)
summary(poorCities)[,9]
#poor people cities
poorCities = subset(airpollution, airpollution$NONPOOR<70)
summary(poorCities)[,9]
richCities = subset(airpollution, airpollution$NONPOOR>=70)
summary(richCities)[,9]
#poor people cities
poorCities = subset(airpollution, airpollution$NONPOOR<80)
summary(poorCities)[,9]
richCities = subset(airpollution, airpollution$NONPOOR>=80)
summary(richCities)[,9]
boxplot(poorCities,richCities)
#poor people cities
poorCities = subset(airpollution$NONPOOR, airpollution$NONPOOR<80)
richCities = subset(airpollution$NONPOOR, airpollution$NONPOOR>=80)
boxplot(poorCities,richCities)
boxplot(poorCities,richCities, ylim=c(50,100))
boxplot(poorCities,richCities)
boxplot(poorCities,richCities, xlab=c("poor, rich"))
boxplot(poorCities,richCities)
#poor people cities
poorCities = subset(airpollution$NONPOOR, airpollution$NONPOOR<80)
richCities = subset(airpollution$NONPOOR, airpollution$NONPOOR>=80)
?summary
#graph pf non-poor vs poor people and their exposure
boxplot(poorCities,richCities)
#poor people cities
poorCities = subset(airpollution$SMEAN, airpollution$NONPOOR<80)
richCities = subset(airpollution$SMEAN, airpollution$NONPOOR>=80)
#graph pf non-poor vs poor people and their exposure
boxplot(poorCities,richCities)
#poor people cities
whiteCities = subset(airpollution$SMEAN, airpollution$PERWH)
nonWhiteCities = subset(airpollution$SMEAN, airpollution$PERWH)
#graph pf non-poor vs poor people and their exposure
boxplot(whiteCities,nonWhiteCities)
airpollution$PERWH
#poor people cities
whiteCities = subset(airpollution$SMEAN, airpollution$PERWH>80)
nonWhiteCities = subset(airpollution$SMEAN, airpollution$PERWH<=80)
#graph pf non-poor vs poor people and their exposure
boxplot(whiteCities,nonWhiteCities)
pairs(airpollution)
####### Question a #######
setwd("~/")
library(quantmod)
library(quantmod)
dt = "2017-2-1"
aapl = getSymbols.yahoo("AAPL", from=dt, auto.assign = F)
View(aapl)
aapl$AAPL.Adjusted
aaplClose = aapl$AAPL.Adjusted
View(aaplClose)
library(PerformanceAnalytics)
library(PerformanceAnalytics)
applRets = dailyReturn(aaplClose, type="log")
#the daily returns of Apple
applRets = na.omit(dailyReturn(aaplClose, type="log"))
View(applRets)
chartSeries(aapl)
library(quantmod)
library(PerformanceAnalytics)
tickers = c("FB", "AAPL", "AMZN", "NFLX")
weights = C(.25,.25,.25,.25)
weights = C(0.25,0.25,0.25,0.25)
weights = C(0.25,0.25,0.25,0.25)
weights = C(0.25,0.25,0.25,0.25)
weights = c(0.25,0.25,0.25,0.25)
mySymble = getSymbols.yahoo(ticker, from="2016-01-03",
periodicity = "daily", auto.assign= FALSE)
portfolioPrices = NULL
for (ticker in tickers) {
#combining all the closing columns for all my tickers
portfolioPrices = cbind(portfolioPrices,
getSymbols.yahoo(ticker,
from="2016-01-03",
periodicity = "daily",
auto.assign= FALSE)[,4])
}
View(portfolioPrices)
source("C:/Users/NIKI IOANNOU/Google Drive/Personal Learning/Quantitative Finance (youtube)/2 Portfolio Analytics.R")
colSums(is.na(portfolioPrices))
getClose(tick){
return(getSymbols.yahoo(tick,
from="2016-01-03",
periodicity = "daily",
auto.assign= FALSE
)[,4]
)
}
getClose(tick){
return(getSymbols.yahoo(tick,
from="2016-01-03",
periodicity = "daily",
auto.assign= FALSE
)[,4]
)
}
getClose(tick) {
return(getSymbols.yahoo(tick,
from="2016-01-03",
periodicity = "daily",
auto.assign= FALSE
)[,4]
)
}
getClose = function(tick) {
return(getSymbols.yahoo(tick,
from="2016-01-03",
periodicity = "daily",
auto.assign= FALSE
)[,4]
)
}
for (ticker in tickers) {
#combining all the closing columns for all my tickers into an
#extensible time-series object (table)
portfolioPrices = cbind(portfolioPrices,
getClose(ticker)
)
}
#checking if my data has any missing data
colSums(is.na(portfolioPrices))
View(portfolioPrices)
portfolioPrices = NULL
getClose = function(tick) {
return(getSymbols.yahoo(tick,
from="2016-01-03",
periodicity = "daily",
auto.assign= FALSE
)[,4]
)
}
for (ticker in tickers) {
#combining all the closing columns for all my tickers into an
#extensible time-series object (table)
portfolioPrices = cbind(portfolioPrices,
getClose(ticker)
)
}
#checking if my data has any missing data
colSums(is.na(portfolioPrices))
#using a benchmark
benchmarkPrices = get(getClose("^GSPC"))
#using a benchmark
benchmarkPrices = get(getClose('^GSPC'))
#using a benchmark
benchmarkPrices = get(getClose(ticker))
#using a benchmark
benchmarkPrices = getClose('^GSPC')
benchmarkPrices
colSums(is.na(benchmarkPrices))
benchmarkReturns = na.omit(ROC(benchmarkPrices))
portfoliokReturns = na.omit(ROC(portfolioPrices))
View(portfolioPrices)
View(portfoliokReturns)
View(benchmarkReturns)
View(portfoliokReturns)
portfoliokReturns = Return.portfolio(portfoliokReturns)
View(portfoliokReturns)
#getting the returns for my portfolio
portfolioReturns = na.omit(ROC(portfolioPrices))
View(portfoliokReturns)
View(portfoliokReturns)
View(portfoliokReturns)
tickers = c("FB", "AAPL", "AMZN", "NFLX")
weights = c(0.25,0.25,0.25,0.25)
portfolioPrices = NULL
#function that gets the closing column for a specified ticker
getClose = function(tick) {
return(getSymbols.yahoo(tick,
from="2016-01-03",
periodicity = "daily",
auto.assign= FALSE
)[,4]
)
}
#iterating through all my tickers
for (ticker in tickers) {
#combining all the closing columns for all my tickers into an
#extensible time-series object (table)
portfolioPrices = cbind(portfolioPrices,
getClose(ticker)
)
}
#getting the returns for my portfolio
portfolioReturns = na.omit(ROC(portfolioPrices))
#checking if my data has any missing data
colSums(is.na(portfolioPrices))
#using a benchmark
benchmarkPrices = getClose('^GSPC')
#getting the returns for my benchmark
benchmarkReturns = na.omit(ROC(benchmarkPrices))
#checking if my data has any missing data
colSums(is.na(benchmarkPrices))
portfolioReturns = Return.portfolio(portfolioReturns)
View(benchmarkReturns)
View(portfolioReturns)
#252 is the number of trading days in a year
CAPM.beta(portfolioReturns, benchmarkReturns, 0.035/252)
#SRARPE ration is a risk metric, it describes the amount of excess
#potential return that could be achieved by taking on a riskier asset
#The higher the Sharpe ratio, the better the return relative to the risk
SharpeRatio(portfolioReturns, 0.035/252)
CAPM.jensenAlpha(portfolioReturns, benchmarkReturns, 0.035/252)
#CAPM gives an expected return on an asset with a given value of risk
#alpha gives return on an investment relative to that of a
#benchmark in the form of a percentage
#beta is a measure of volatility (risk). The market has beta = 1
#252 is the number of trading days in a year
#0.035 is our arbitrary "risk-free" number
CAPM.beta(portfolioReturns, benchmarkReturns, 0.035/252)
#SRARPE ration is a risk metric, it describes the amount of excess
#potential return that could be achieved by taking on a riskier asset
#The higher the Sharpe ratio, the better the return relative to the risk
SharpeRatio(portfolioReturns, 0.035/252)
table.AnnualizedReturns(portfolioReturns)
table.CalendarReturns(portfolioReturns)
annualReturns = table.AnnualizedReturns(portfolioReturns)
calendarReturns = table.CalendarReturns(portfolioReturns)
View(annualReturns)
library(quantmod)
library(PerformanceAnalytics)
library(quantmod)
library(PerformanceAnalytics)
tickers = c("FB", "AAPL", "AMZN", "NFLX", "SQ", "NVDA")
source("C:/Users/NIKI IOANNOU/Google Drive/Personal Learning/Quantitative Finance (youtube)/3 Portfolio optimization.R")
?add.constraint()
portf = add.constraint(port, type="weight_sum", min_sum=1, max_sum=1)
library(quantmod)
library(quantmod)
library(PerformanceAnalytics)
dt = "2017-2-1"
#time-series data of apple
aapl = getSymbols.yahoo("AAPL", from=dt, auto.assign = F)
#keeping the Apple "close" column
aaplClose = aapl$AAPL.Adjusted
#the daily returns of Apple
applRets = na.omit(dailyReturn(aaplClose, type="log"))
#plotting the Apple data
chartSeries(aapl)
View(aapl)
View(aaplClose)
#time-series data of apple
aapl = getSymbols.yahoo("CHG", from=dt, auto.assign = F)
#time-series data of apple
aapl = getSymbols.yahoo("CHG.L", from=dt, auto.assign = F)
#keeping the Apple "close" column
aaplClose = aapl$AAPL.Adjusted
#the daily returns of Apple
applRets = na.omit(dailyReturn(aaplClose, type="log"))
#plotting the Apple data
chartSeries(aapl)
View(aapl)
library(ProjectTemplate)
setwd("~/")
setwd("C:/Users/NIKI IOANNOU/Google Drive/University Material/Master's Degree/Data Management/Assignments/Source Code")
create.project("template")
setwd("C:/Users/NIKI IOANNOU/Google Drive/University Material/Master's Degree/Data Management/Assignments/Source Code/reports")
setwd("C:/Users/NIKI IOANNOU/Google Drive/University Material/Master's Degree/Data Management/Assignments/Source Code/reports")
setwd("C:/Users/NIKI IOANNOU/Google Drive/University Material/Master's Degree/Data Management/Assignments/Source Code")
setwd("C:/Users/NIKI IOANNOU/Google Drive/University Material/Master's Degree/Data Management/Assignments/Source Code/reports")
setwd("C:/Users/NIKI IOANNOU/Google Drive/University Material/Master's Degree/Data Management/Assignments/Source Code/reports")
setwd("Source Code/reports")
setwd("template/reports")
library(readr)
cyber_security_1_enrolments <- read_csv("C:/Users/NIKI IOANNOU/Google Drive/University Material/Master's Degree/Data Management/Assignments/Source Code/template/data/cyber-security-1_enrolments.csv")
View(cyber_security_1_enrolments)
library(readr)
cyber_security_1_question_response <- read_csv("C:/Users/NIKI IOANNOU/Google Drive/University Material/Master's Degree/Data Management/Assignments/Source Code/template/data/cyber-security-1_question-response.csv")
View(cyber_security_1_question_response)
library(readr)
cyber_security_1_step_activity <- read_csv("C:/Users/NIKI IOANNOU/Google Drive/University Material/Master's Degree/Data Management/Assignments/Source Code/template/data/cyber-security-1_step-activity.csv")
View(cyber_security_1_step_activity)
for (dataset in project.info$data)
{
message(paste('Showing top 5 rows of', dataset))
print(head(get(dataset)))
}
library('ProjectTemplate')
load.project()
library('ProjectTemplate')
load.project()
na.omit(cyber_security_1_enrolments)
cyber_security_1_enrolments
cyber_security_1_question_response$quiz_question
cyber_security_1_question_response$quiz_question==1.7.2
cyber_security_1_question_response$quiz_question[cyber_security_1_question_response$quiz_question==1.7.2]
cyber_security_1_question_response$quiz_question[cyber_security_1_question_response$quiz_question=="1.7.2"]
cyber_security_1_question_response$quiz_question[cyber_security_1_question_response$quiz_question=="1.7.3"]
cyber_security_1_question_response$quiz_question[cyber_security_1_question_response$quiz_question=="1.7.5"]
cyber_security_1_question_response$quiz_question[cyber_security_1_question_response$quiz_question=="1.7.9"]
cyber_security_1_question_response$quiz_question[cyber_security_1_question_response$quiz_question=="1.7.6"]
cyber_security_1_question_response$quiz_question[cyber_security_1_question_response$quiz_question=="1.7.7"]
cyber_security_1_question_response[cyber_security_1_question_response$learner_id=="NA"]
cyber_security_1_question_response[cyber_security_1_question_response$learner_id="NA"]
cyber_security_1_question_response[cyber_security_1_question_response$learner_id=="NA"]
cyber_security_1_question_response$learner_id[cyber_security_1_question_response$learner_id=="NA"]
na.omit(cyber_security_1_question_response$learner_id[cyber_security_1_question_response$learner_id=="NA"])
na.omit(cyber_security_1_question_response$learner_id[cyber_security_1_question_response$learner_id=="NA"])
cyber_security_1_question_response$quiz_question[cyber_security_1_question_response$quiz_question=="1.7.3"]
cyber_security_1_question_response[cyber_security_1_question_response$quiz_question=="1.7.3"]
a=cyber_security_1_question_response[cyber_security_1_question_response$quiz_question=="1.7.3"]
cyber_security_1_question_response$quiz_question=="1.7.3"
cyber_security_1_question_response$quiz_question="1.7.3"
cyber_security_1_question_response$quiz_question=="1.7.3"
cyber_security_1_question_response[cyber_security_1_question_response$quiz_question=="1.7.3"]
cyber_security_1_question_response[length(cyber_security_1_question_response$quiz_question=="1.7.3")]
cyber_security_1_question_response[5:6]
cyber_security_1_question_response[2]
cyber_security_1_question_response[2,cyber_security_1_question_response$quiz_question=="1.7.4"]
cyber_security_1_question_response$correct[cyber_security_1_question_response$quiz_question=="1.7.4"]
cyber_security_1_question_response$correct[cyber_security_1_question_response$quiz_question=="1.7.3"]
View(cyber_security_1_question_response)
library(readr)
cyber_security_1_question_response <- read_csv("C:/Users/NIKI IOANNOU/Google Drive/University Material/Master's Degree/Data Management/Assignments/Source Code/template/data/cyber-security-1_question-response.csv")
View(cyber_security_1_question_response)
View(cyber_security_1_question_response)
cyber_security_1_question_response$correct[cyber_security_1_question_response$quiz_question=="1.7.3"]
length(ber_security_1_question_response$correct[cyber_security_1_question_response$quiz_question=="1.7.3"])
length(cyber_security_1_question_response$correct[cyber_security_1_question_response$quiz_question=="1.7.3"])
