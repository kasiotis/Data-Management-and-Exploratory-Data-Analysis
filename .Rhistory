for (fold in 1:nfolds) fold_sizes[fold] = length(which(fold_ind==fold))
test_error = weighted.mean(cv_errors, w=fold_sizes)
return(test_error)
}
p=reg_cv(BreastCancer.red[,1:6], y, fold_index)
p
min(p)
reg_cv = function(x1, y, fold_ind){
Xy = data.frame(x1, y=y)
nfolds = max(fold_ind)
if(!all.equal(sort(unique(fold_ind)), 1:nfolds)) stop("Invalid fold partition.")
cv_errors = numeric(nfolds)
for (fold in 1:nfolds) {
tmp_fit = glm(y~., data = Xy[fold_ind!=fold,], family = "binomial")
phat = predict(tmp_fit, Xy[fold_ind == fold,], type = "response")
yhat = ifelse(phat > 0.5, 1, 0)
yobs = y[fold_ind==fold]
cv_errors[fold] = 1 - mean(yobs == yhat)
}
fold_sizes = numeric(nfolds)
for (fold in 1:nfolds) fold_sizes[fold] = length(which(fold_ind==fold))
test_error = weighted.mean(cv_errors, w=fold_sizes)
return(test_error)
}
p=reg_cv(BreastCancer.red[,1:6], y, fold_index)
p
View(BreastCancer)
View(BreastCancer.red)
#identifying the best fitting models
(best_AIC = bss_fit_AIC$ModelReport$Bestk)
(best_BIC = bss_fit_BIC$ModelReport$Bestk)
bss_fit_BIC$Subsets[pstar+1]
bss_fit_BIC$Subsets[pstar+1,]
#examining the results
bss_fit_AIC$Subsets
bss_fit_BIC$Subsets
lda_fit$means
#group means i guess
cat("lda benign group mean: ",lda.benign.mean = mean(lda_fit$means[1,]))
#group means i guess
cat("lda benign group mean: ",lda.benign.mean = lda_fit$means[1,])
lda_fit$means
(lda_fit = lda(Class~., data = BreastCancer[,2:11])) #2 groups
lda_fit$means
lda_fit$means
qda_fit$means
reg_cv_lda = function(x1, y, fold_ind){
Xy = data.frame(x1, y=y)
nfolds = max(fold_ind)
if(!all.equal(sort(unique(fold_ind)), 1:nfolds)) stop("Invalid fold partition.")
cv_errors = numeric(nfolds)
for (fold in 1:nfolds) {
tmp_fit = lda(y~., data = Xy[fold_ind!=fold,])
phat = predict(tmp_fit, Xy[fold_ind == fold,])
yhat = phat$
yobs = y[fold_ind==fold]
cv_errors[fold] = 1 - mean(yobs == yhat)
}
fold_sizes = numeric(nfolds)
for (fold in 1:nfolds) fold_sizes[fold] = length(which(fold_ind==fold))
test_error = weighted.mean(cv_errors, w=fold_sizes)
return(test_error)
}
reg_cv_lda(x1[,2:10], y, fold_index)
View(x1)
reg_cv_lda(x1, y, fold_index)
reg_cv_lda = function(x1, y, fold_ind){
Xy = data.frame(x1, y=y)
nfolds = max(fold_ind)
if(!all.equal(sort(unique(fold_ind)), 1:nfolds)) stop("Invalid fold partition.")
cv_errors = numeric(nfolds)
for (fold in 1:nfolds) {
tmp_fit = lda(y~., data = Xy[fold_ind!=fold,])
phat = predict(tmp_fit, Xy[fold_ind == fold,])
yhat = phat$class
yobs = y[fold_ind==fold]
cv_errors[fold] = 1 - mean(yobs == yhat)
}
fold_sizes = numeric(nfolds)
for (fold in 1:nfolds) fold_sizes[fold] = length(which(fold_ind==fold))
test_error = weighted.mean(cv_errors, w=fold_sizes)
return(test_error)
}
reg_cv_lda(x1, y, fold_index)
reg_cv_qda(x1, y, fold_index)
reg_cv_qda = function(x1, y, fold_ind){
Xy = data.frame(x1, y=y)
nfolds = max(fold_ind)
if(!all.equal(sort(unique(fold_ind)), 1:nfolds)) stop("Invalid fold partition.")
cv_errors = numeric(nfolds)
for (fold in 1:nfolds) {
tmp_fit = qda(y~., data = Xy[fold_ind!=fold,])
phat = predict(tmp_fit, Xy[fold_ind == fold,])
yhat = phat$class
yobs = y[fold_ind==fold]
cv_errors[fold] = 1 - mean(yobs == yhat)
}
fold_sizes = numeric(nfolds)
for (fold in 1:nfolds) fold_sizes[fold] = length(which(fold_ind==fold))
test_error = weighted.mean(cv_errors, w=fold_sizes)
return(test_error)
}
reg_cv_qda(x1, y, fold_index)
reg_cv_lasso = cv.glmnet(x1, y, family="binomial", alpha=1, standardize=FALSE,
lambda = grid, type.measure = "class", foldid = fold_index)
reg_cv_lasso$lambda.min
reg_cv_lasso = cv.glmnet(x1, y, family="binomial", alpha=1, standardize=FALSE,
lambda = grid, type.measure = "class", foldid = fold_index)
#finding the optimal value for the tuning parameter
(lambda_lasso_min = reg_cv_lasso$lambda.min)
#which parameter was the minimum?
which_lambda_lasso = which(reg_cv_lasso$lambda == lambda_lasso_min)
#test error
reg_cv_lasso$cvm[which_lambda_lasso]
reg_cv_qda(x1, y, fold_index)
#test error
reg_cv_lasso$cvm[which_lambda_lasso]
#test error
reg_cv_lasso$cvm[which_lambda_lasso]
reg_cv_lasso = cv.glmnet(x1, y, family="binomial", alpha=1, standardize=FALSE,
lambda = grid, type.measure = "class",
nfolds = nfolds, foldid = fold_index)
#finding the optimal value for the tuning parameter
(lambda_lasso_min = reg_cv_lasso$lambda.min)
#which parameter was the minimum?
which_lambda_lasso = which(reg_cv_lasso$lambda == lambda_lasso_min)
#test error
reg_cv_lasso$cvm[which_lambda_lasso]
#set my working dir to my projTemp folder
setwd("C:/Users/NIKI IOANNOU/Google Drive/University Material/Master's Degree/CSC8631 Data Management and EDA/Assignments/Source Code/template")
#load projTemp library
library('ProjectTemplate')
load.project()
View(cyber.security.3_archetype.survey.responses)
View(cyber.security.2_weekly.sentiment.survey.responses)
View(cyber.security.1_weekly.sentiment.survey.responses)
load.project()
View(cyber.security.1_enrolments)
grad
load.project()
(percentage.of.grads(cyber.security.1_enrolments))
(percentage.of.grads(cyber.security.1_enrolments))
enrolled = length(cyber.security.1_enrolments$fully_participated_at[cyber.security.1_enrolments$fully_participated_at!=""])
graduated = length(cyber.security.1_enrolments$fully_participated_at[cyber.security.1_enrolments$fully_participated_at!=""])
pp= graduated/enrolled*100
pp
enrolled = length(cyber.security.1_enrolments$enrolled_at[cyber.security.1_enrolments$enrolled_at!=""])
graduated = length(cyber.security.1_enrolments$fully_participated_at[cyber.security.1_enrolments$fully_participated_at!=""])
pp= graduated/enrolled*100
pp
load.project()
(percentage.of.grads(cyber.security.1_enrolments))
(percentage.of.grads(cyber.security.2_enrolments))
(percentage.of.grads(cyber.security.7_enrolments))
(percentage.of.grads(cyber.security.1_enrolments))
View(cyber.security.1_question.response)
str(cyber.security.1_question.response$question_type)
sapply(cyber.security.1_question.response$question_type)
distinct(cyber.security.1_question.response$question_type)
library(dyplr)
library(dplyr)
distinct(cyber.security.1_question.response$question_type)
sapply(cyber.security.1_question.response$question_type)
apply(cyber.security.1_question.response$question_type)
View(cyber.security.1_step.activity)
View(cyber.security.3_video.stats)
View(cyber.security.5_leaving.survey.responses)
str(cyber.security.5_leaving.survey.responses)
str(cyber.security.5_leaving.survey.responses$leaving_reason)
sapply(cyber.security.5_leaving.survey.responses$leaving_reason)
sapply(cyber.security.5_leaving.survey.responses)
unique(cyber.security.5_leaving.survey.responses$leaving_reason)
unique(cyber.security.5_leaving.survey.responses$last_completed_step)
View(cyber.security.7_weekly.sentiment.survey.responses)
View(cyber.security.1_step.activity)
enrollments= c(
length(cyber.security.1_enrolments$enrolled_at[cyber.security.1_enrolments$enrolled_at!=""]),
length(cyber.security.2_enrolments$enrolled_at[cyber.security.2_enrolments$enrolled_at!=""]),
length(cyber.security.3_enrolments$enrolled_at[cyber.security.3_enrolments$enrolled_at!=""]),
length(cyber.security.4_enrolments$enrolled_at[cyber.security.4_enrolments$enrolled_at!=""]),
length(cyber.security.5_enrolments$enrolled_at[cyber.security.5_enrolments$enrolled_at!=""]),
length(cyber.security.6_enrolments$enrolled_at[cyber.security.6_enrolments$enrolled_at!=""]),
length(cyber.security.7_enrolments$enrolled_at[cyber.security.7_enrolments$enrolled_at!=""])
)
(percentage.of.grads(cyber.security.1_enrolments))
graduated
length(cyber.security.1_enrolments$enrolled_at[cyber.security.1_enrolments$enrolled_at!=""])
length(cyber.security.1_enrolments$fully_participated_at[cyber.security.1_enrolments$fully_participated_at!=""])
length(cyber.security.1_enrolments$fully_participated_at[cyber.security.1_enrolments$fully_participated_at!=""])
length(cyber.security.1_enrolments$fully_participated_at[cyber.security.1_enrolments$fully_participated_at!=""])
length(cyber.security.1_enrolments$fully_participated_at[cyber.security.1_enrolments$fully_participated_at!=""])
length(cyber.security.1_enrolments$fully_participated_at[cyber.security.1_enrolments$fully_participated_at!=""])
####################### recording enrollments and completions ###################################
cyber.security.1_enrolments$enrolled_at
####################### recording enrollments and completions ###################################
cyber.security.?_enrolments$enrolled_at
####################### recording enrollments and completions ###################################
cyber.security."?"_enrolments$enrolled_at
####################### recording enrollments and completions ###################################
cyber.security.?
enrollments= c(
length(cyber.security.1_enrolments$enrolled_at[cyber.security.1_enrolments$enrolled_at!=""]),
length(cyber.security.2_enrolments$enrolled_at[cyber.security.2_enrolments$enrolled_at!=""]),
length(cyber.security.3_enrolments$enrolled_at[cyber.security.3_enrolments$enrolled_at!=""]),
length(cyber.security.4_enrolments$enrolled_at[cyber.security.4_enrolments$enrolled_at!=""]),
length(cyber.security.5_enrolments$enrolled_at[cyber.security.5_enrolments$enrolled_at!=""]),
length(cyber.security.6_enrolments$enrolled_at[cyber.security.6_enrolments$enrolled_at!=""]),
length(cyber.security.7_enrolments$enrolled_at[cyber.security.7_enrolments$enrolled_at!=""])
)
####################### recording enrollments and completions ###################################
cyber.security.?
enrollments= c(
length(cyber.security.1_enrolments$enrolled_at[cyber.security.1_enrolments$enrolled_at!=""]),
length(cyber.security.2_enrolments$enrolled_at[cyber.security.2_enrolments$enrolled_at!=""]),
length(cyber.security.3_enrolments$enrolled_at[cyber.security.3_enrolments$enrolled_at!=""]),
length(cyber.security.4_enrolments$enrolled_at[cyber.security.4_enrolments$enrolled_at!=""]),
length(cyber.security.5_enrolments$enrolled_at[cyber.security.5_enrolments$enrolled_at!=""]),
length(cyber.security.6_enrolments$enrolled_at[cyber.security.6_enrolments$enrolled_at!=""]),
length(cyber.security.7_enrolments$enrolled_at[cyber.security.7_enrolments$enrolled_at!=""])
)
?gregexec()
?globalenv()
globalenv()
globalenv(env)
globalenv(cyber.security.1_enrolments)
temp <- list.files(pattern="*.csv")
dfs <- lapply(temp, read.csv)
View(dfs)
####################### recording enrollments and completions ###################################
cyber.security.+1+_enrolments
####################### recording enrollments and completions ###################################
i=1
cyber.security.+i+_enrolments
cyber.security.1_enrolments
cyber.security.4_enrolments
length(cyber.security.2_enrolments$fully_participated_at[cyber.security.2_enrolments$fully_participated_at!=""])/enrollments[2]*100
v = c(cyber.security.3_enrolments,cyber.security.4_enrolments)
View(v)
v = c(cyber.security.3_enrolments$enrolled_at,cyber.security.4_enrolments$enrolled_at)
View(cyber.security.1_enrolments)
grad
percentage.of.grads(cyber.security.1_enrolments)
percentage.of.grads(cyber.security.3_enrolments)
percentage.of.grads(cyber.security.4_enrolments)
percentage.of.grads(cyber.security.8_enrolments)
sets= cyber.security.+\*+_enrolments
grad
gradPercent
gradPercent[1]
gradPercent[2]
gradPercent[3]
gradPercent[4]
gradPercent[5]
gradPercent[8]
?LPARen
####################### recording enrollments and completions ###################################
glob2rx("cyber.security.*_enrollments")
/glob2rx()
?glob2rx()
^cyber\\.security\\..*_enrollments
objects(pattern = glob2rx("cyber.security.*_enrollments"))
objects(all.names = TRUE,pattern = glob2rx("cyber.security.*_enrollments"))
objects(all.names = TRUE,pattern = glob2rx("cyber.security.*_enrolments"))
enrolment.runs = objects(all.names = TRUE, pattern = glob2rx("cyber.security.*_enrolments"))
enrolment.runs[1]
?objects
length(enrolment.runs[1]$enrolled_at[enrolment.runs[1]$enrolled_at!=""])
enrolment.runs[1]
enrolment.runs = ls(all.names = TRUE, pattern = glob2rx("cyber.security.*_enrolments"))
enrolment.runs[1]
find(enrolment.runs[1])
apropos(enrolment.runs[1])
apropos(enrolment.runs[1])
get(enrolment.runs[1])
enrolment.runs = get(ls(all.names = TRUE, pattern = glob2rx("cyber.security.*_enrolments")))
enrolment.runs = ls(all.names = TRUE, pattern = glob2rx("cyber.security.*_enrolments"))
(enrolment.runs = ls(all.names = TRUE, pattern = glob2rx("cyber.security.*_enrolments")))
(step.activity.runs = ls(all.names = TRUE, pattern = glob2rx("cyber.security.*_step.activity")))
for (run in step.activity.runs) {
run
}
for (run in step.activity.runs) {
print(run)
}
for (run in step.activity.runs) {
get(run)
}
for (run in step.activity.runs) {
print(run)
}
get(step.activity.runs)
get(step.activity.runs[1])
get(step.activity.runs[1:length(step.activity.runs)])
get(step.activity.runs[1])
for (run in step.activity.runs) {
print(run)
}
get(step.activity.runs[1])
get(step.activity.runs[6])
get(step.activity.runs[7])
for (run in step.activity.runs) {
print(run)
}
for (run in step.activity.runs) {
head(get(run))
}
for (run in step.activity.runs) {
get(run)
}
(step.activity.runs = ls(all.names = TRUE, pattern = glob2rx("cyber.security.*_step.activity")))
get(step.activity.runs[1])
?get
mget(step.activity.runs)
v = mget(step.activity.runs)
View(v)
(step.activity.runs = mget(ls(all.names = TRUE, pattern = glob2rx("cyber.security.*_step.activity"))))
#changing the step column so that it represents the week step numbers by
#multiplying the week number by a hundred and the adding the step number
?objects
View(step.activity.runs)
View(step.activity.runs[["cyber.security.1_step.activity"]])
for (run in step.activity.runs) {
run
}
View(run)
View(step.activity.runs)
(step.activity.runs = ls(all.names = TRUE, pattern = glob2rx("cyber.security.*_step.activity")))
for (run in step.activity.runs) {
run
}
View(cyber.security.1_step.activity)
View(cyber.security.1_step.activity)
for (run in step.activity.runs) {
get(run)[,2] = get(run)[,3]*100 + get(run)[,4]
}
#changing the step column so that it represents the week step numbers by
#multiplying the week number by a hundred and the adding the step number
?mget()
for (run in step.activity.runs) {
assign(run[,2],(get(run)[,3]*100 + get(run)[,4]))
}
View(cyber.security.1_step.activity)
for (run in step.activity.runs) {
assign(get(run)[,2], value = (get(run)[,3]*100 + get(run)[,4]))
}
for (run in step.activity.runs) {
print((get(run)[,3]*100 + get(run)[,4]))
}
for (run in step.activity.runs) {
head((get(run)[,3]*100 + get(run)[,4]))
}
for (run in step.activity.runs) {
print((get(run)[,3]*100 + get(run)[,4])[50,])
}
for (run in step.activity.runs) {
assign(run[,2], value = (get(run)[,3]*100 + get(run)[,4]))
}
for (run in step.activity.runs) {
attach(run)
step = week_number*100 + step_number
}
(step.activity.runs = ls(all.names = TRUE, pattern = glob2rx("cyber.security.*_step.activity")))
for (run in step.activity.runs) {
attach(run)
step = week_number*100 + step_number
}
summary(cyber.security.1_enrolments)
boxplot(cyber.security.1_enrolments)
(enrolment.runs = ls(all.names = TRUE, pattern = glob2rx("cyber.security.*_enrolments")))
(percentage.of.grads(cyber.security.1_enrolments))
(percentage.of.grads(cyber.security.2_enrolments))
gradPercent[2]
(percentage.of.grads(cyber.security.8_enrolments))
git status
load.project()
for (run in step.activity.runs) {
run
}
print(run)
for (run in step.activity.runs) {
print(run)
}
for (run in mget(step.activity.runs)) {
print(run)
}
View(cyber.security.1_step.activity)
#iterating through all of the "step.activity" csv files in my environment
for (run in mget(step.activity.runs)) {
print(run)
run[,2] = run[,3]*100 + run[,4]
}
#iterating through all of the "step.activity" csv files in my environment
for (run in mget(step.activity.runs)) {
run[,2] = run[,3]*100 + run[,4]
}
load.project()
View(cyber.security.1_step.activity)
View(cyber.security.2_step.activity)
View(cyber.security.1_step.activity)
load.project()
View(cyber.security.1_step.activity)
View(cyber.security.2_step.activity)
load.project()
View(cyber.security.1_step.activity)
load.project()
View(cyber.security.1_step.activity)
View(cyber.security.1_step.activity)
#iterating through all of the "step.activity" csv files in my environment
for (run in mget(step.activity.runs)) {
run[,2] = run[,3]*100 + run[,4]
}
View(cyber.security.1_step.activity)
#getting the names of all the "step.activity" files in my environment for all runs
(step.activity.runs = ls(all.names = TRUE, pattern = glob2rx("cyber.security.*_step.activity")))
#iterating through all of the "step.activity" csv files in my environment
for (run in mget(step.activity.runs)) {
run[,2] = run[,3]*100 + run[,4]
}
View(cyber.security.5_step.activity)
mget(step.activity.runs)
#getting the names of all the "step.activity" files in my environment for all runs
(step.activity.runs = ls(all.names = TRUE, pattern = glob2rx("cyber.security.*_step.activity")))
#test to see if i can use all step.activity files
mget(step.activity.runs)
View(cyber.security.1_step.activity)
#getting the names of all the "step.activity" files in my environment for all runs
(step.activity.runs = ls(all.names = TRUE, pattern = glob2rx("cyber.security.*_step.activity")))
#test to see if i can use all step.activity files
mget(step.activity.runs)
#iterating through all of the "step.activity" csv files in my environment
for (run in mget(step.activity.runs)) {
run[,2] = run[,3]*100 + run[,4]
}
View(cyber.security.1_step.activity)
View(run)
View(run)
View(cyber.security.1_step.activity)
#getting the names of all the "step.activity" files in my environment for all runs
(step.activity.runs = ls(all.names = TRUE, pattern = glob2rx("cyber.security.*_step.activity")))
#test to see if i can use all step.activity files
mget(step.activity.runs)
#changing the step column so that it represents the week step numbers by
#multiplying the week number by a hundred and the adding the step number
?mget()
?attach
#test to see if i can use all step.activity files
mget(step.activity.runs)
#load projTemp library
?library('ProjectTemplate')
load.project()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
head(cyber.security.1_enrolments)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
library(ProjectTemplate)
load.project()
summary(cyber.security.1_enrolments)
head(cyber.security.1_enrolments)
colnames(cyber.security.1_enrolments)
head(cyber.security.1_enrolments)
colnames(cyber.security.1_enrolments)
summary(cyber.security.1_enrolments)
?summary
colnames(cyber.security.1_enrolments)
summary(cyber.security.1_enrolments)
?summary
colnames(cyber.security.1_enrolments)
sapply(cyber.security.1_enrolments)
colnames(cyber.security.1_enrolments)
str(cyber.security.1_enrolments)
?summary
?str
colnames(cyber.security.1_enrolments)
str(cyber.security.1_enrolments)
?str
?summary
str(cyber.security.1_enrolments)
?str
?summary
?str
str(cyber.security.1_enrolments, strict.width = "wrap")
?str
str(cyber.security.7_enrolments, strict.width = "wrap", vec.len=2)
str(cyber.security.7_step.activity, strict.width = "wrap", vec.len=2)
load.project()
str(cyber.security.7_weekly.sentiment.survey.responses, strict.width = "wrap", vec.len=2)
unique(cyber.security.7_weekly.sentiment.survey.responses)
length(unique(cyber.security.7_weekly.sentiment.survey.responses))
length(unique(cyber.security.7_weekly.sentiment.survey.responses$id))
str(cyber.security.7_leaving.survey.responses, strict.width = "wrap", vec.len=2)
str(cyber.security.7_question.response, strict.width = "wrap", vec.len=2)
#plotting the step (which consists of week number followed by a dot and then the step number)
#against the actual recorded step number to see if the data is correct
plot(cyber.security.7_step.activity$step_number,cyber.security.7_step.activity$step)
#plotting the step (which consists of week number followed by a dot and then the step number)
#against the actual recorded step number to see if the data is correct
plot(cyber.security.7_step.activity$step, cyber.security.7_step.activity$step_number)
#plotting the step (which consists of week number followed by a dot and then the step number)
#against the actual recorded step number to see if the data is correct
plot(cyber.security.7_step.activity$step_number,cyber.security.7_step.activity$step)
#plotting the step (which consists of week number followed by a dot and then the step number)
#against the actual recorded step number to see if the data is correct
plot(cyber.security.7_step.activity$step_number,cyber.security.7_step.activity$step, xlab = "Step number", ylab = "Step column")
str(cyber.security.7_video.stats, strict.width = "wrap", vec.len=2)
View(cyber.security.1_archetype.survey.responses)
View(cyber.security.4_archetype.survey.responses)
str(cyber.security.7_archetype.survey.responses, strict.width = "wrap", vec.len=2)
View(cyber.security.5_archetype.survey.responses)
View(cyber.security.2_team.members)
str(cyber.security.7_team.members, strict.width = "wrap", vec.len=2)
View(cyber.security.2_team.members)
